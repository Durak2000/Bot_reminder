# ovoshi.py/bot_handler.py

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import os
import json
from datetime import datetime

load_dotenv(dotenv_path="ovoshi.py/config.env")

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD")

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

USERS_FILE = "data/users.json"
AUTHORIZED_ADMINS = set()

# --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ ---
@dp.message()
async def auto_subscribe(message: types.Message):
    user_id = message.from_user.id
    users = load_users()

    if user_id not in users:
        users.append(user_id)
        save_users(users)
        await message.answer("–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö!")

# --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞ ---
@dp.message(Command("login"))
async def cmd_login(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")

    @dp.message()
    async def check_password(msg: types.Message):
        entered = msg.text.strip()
        if entered == ADMIN_PASSWORD:
            AUTHORIZED_ADMINS.add(msg.from_user.id)
            await msg.answer("‚úÖ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω. –î–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        else:
            await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")

# --- –ö–æ–º–∞–Ω–¥–∞ /new_lesson ---
@dp.message(Command("new_lesson"))
async def new_lesson(message: types.Message):
    if message.from_user.id not in AUTHORIZED_ADMINS:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è:\n–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")

    @dp.message()
    async def handle_time(msg: types.Message):
        try:
            lesson_time = datetime.strptime(msg.text.strip(), "%d.%m.%Y %H:%M")
            users = load_users()

            for user_id in users:
                try:
                    await bot.send_message(
                        user_id,
                        f"üîî –ó–∞–Ω—è—Ç–∏–µ —Å–æ—Å—Ç–æ–∏—Ç—Å—è {lesson_time.strftime('%d.%m.%Y %H:%M')}"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

            await msg.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑–æ—Å–ª–∞–Ω—ã.")
        except ValueError:
            await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.")

# --- –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ---
def load_users():
    os.makedirs("data", exist_ok=True)
    if not os.path.exists(USERS_FILE):
        return []
    with open(USERS_FILE, "r") as f:
        return json.load(f)

def save_users(users):
    with open(USERS_FILE, "w") as f:
        json.dump(users, f, indent=2)
